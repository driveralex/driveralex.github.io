import{_ as u}from"./ButtonSection.a2e21b1c.js";import{v as i,o as p,b as o,g as s,e as n,h as r,d as e,l as k}from"./vendor.d933a0e7.js";import"./app.3607838d.js";const m={class:"prose prose-sm m-auto text-left"},h=s(`<h1>Igraph package</h1><p>The R Igraph package is dedicated for creation, manipulation and analysis of networks.</p><p>First you need to download the igraph library via the R packet manager:</p><pre class="language-r"><code class="language-r">install.packages<span class="token punctuation">(</span><span class="token string">&quot;igraph&quot;</span><span class="token punctuation">)</span>
</code></pre><p>Then load the package at the begging of the script</p><pre class="language-r"><code class="language-r">library<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
</code></pre><h3>1) From adjacency matrix to Igraph</h3><p>The function <code>undirectedIgraphFromAdjancyMatrix</code> defines an undirected graph in Igraph from an adjacency matrix.</p><pre class="language-r"><code class="language-r">undirectedIgraphFromAdjancyMatrix <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input_mat<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  nbnode <span class="token operator">&lt;-</span> nrow<span class="token punctuation">(</span>input_mat<span class="token punctuation">)</span>
  graph  <span class="token operator">&lt;-</span> make_empty_graph<span class="token punctuation">(</span>directed <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
  igraph <span class="token operator">&lt;-</span> add_vertices<span class="token punctuation">(</span>graph<span class="token punctuation">,</span>nbnode<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span> nbnode<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token keyword">in</span> i<span class="token operator">:</span>nbnode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>input_mat<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        igraph <span class="token operator">&lt;-</span> add_edges<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> c<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  igraph
<span class="token punctuation">}</span>
</code></pre><p>The function <code>directedIgraphFromAdjancyMatrix</code> do the same job but with a directed graph.</p><pre class="language-r"><code class="language-r">directedIgraphFromAdjancyMatrix <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input_mat<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  nbnode <span class="token operator">&lt;-</span> nrow<span class="token punctuation">(</span>input_mat<span class="token punctuation">)</span>
  graph  <span class="token operator">&lt;-</span> make_empty_graph<span class="token punctuation">(</span>directed <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
  igraph <span class="token operator">&lt;-</span> add_vertices<span class="token punctuation">(</span>graph<span class="token punctuation">,</span>nbnode<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span> nbnode<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span>nbnode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>input_mat<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        igraph <span class="token operator">&lt;-</span> add_edges<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> c<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  igraph
<span class="token punctuation">}</span>
</code></pre><h3>2) Usual functions</h3><h4>Degrees</h4><p>Using igraph you can have <strong>degree</strong> with</p><pre class="language-r"><code class="language-r">igraphdegrees <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><h4><strong>Global clustering coefficient</strong></h4>`,16),d=n("section",null,[n("eqn",null,[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"C"),n("mo",null,":"),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"r"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"a"),n("mi",null,"n"),n("mi",null,"g"),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"s"),n("mo",null,"\u2217"),n("mn",null,"3")]),n("mrow",null,[n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"r"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"n"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"c"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"d"),n("mtext",null,"\xA0"),n("mi",null,"t"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"p"),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"s")])])]),n("annotation",{encoding:"application/x-tex"}," C := \\frac{number\\ of\\ triangles * 3}{number\\ of\\ connected\\ triples} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.2519em","vertical-align":"-0.8804em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"mb"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"co"),n("span",{class:"mord mathnormal"},"nn"),n("span",{class:"mord mathnormal"},"ec"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"pl"),n("span",{class:"mord mathnormal"},"es")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"mb"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"ian"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"es"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2217"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord"},"3")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8804em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])])],-1),g=s(`<pre class="language-r"><code class="language-r">global_clustering_coefficients <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>    
<span class="token punctuation">{</span>
  transitivity<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><h4><strong>Local clustering coefficient</strong> for a given node</h4>`,2),y=n("section",null,[n("eqn",null,[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"C"),n("mi",null,"i")]),n("mo",null,":"),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"r"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"p"),n("mi",null,"a"),n("mi",null,"i"),n("mi",null,"r"),n("mi",null,"s"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"i"),n("mi",null,"g"),n("mi",null,"h"),n("mi",null,"b"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"s"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"i"),n("mtext",null,"\xA0"),n("mi",null,"t"),n("mi",null,"h"),n("mi",null,"a"),n("mi",null,"t"),n("mtext",null,"\xA0"),n("mi",null,"a"),n("mi",null,"r"),n("mi",null,"e"),n("mtext",null,"\xA0"),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"n"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"c"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"d")]),n("mrow",null,[n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"b"),n("mi",null,"e"),n("mi",null,"r"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"p"),n("mi",null,"a"),n("mi",null,"i"),n("mi",null,"r"),n("mi",null,"s"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"i"),n("mi",null,"g"),n("mi",null,"h"),n("mi",null,"b"),n("mi",null,"o"),n("mi",null,"r"),n("mi",null,"s"),n("mtext",null,"\xA0"),n("mi",null,"o"),n("mi",null,"f"),n("mtext",null,"\xA0"),n("mi",null,"i")])])]),n("annotation",{encoding:"application/x-tex"}," C_{i} := \\frac{number\\ of \\ pairs \\ of\\ neighbors\\ of\\ i\\ that\\ are\\ connected}{number\\ of\\ pairs\\ of\\ neighbors\\ of\\ i} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.2519em","vertical-align":"-0.8804em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"mb"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"ai"),n("span",{class:"mord mathnormal"},"rs"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"hb"),n("span",{class:"mord mathnormal"},"ors"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"i")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"mb"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"ai"),n("span",{class:"mord mathnormal"},"rs"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal"},"hb"),n("span",{class:"mord mathnormal"},"ors"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"ha"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"re"),n("span",{class:"mspace"},"\xA0"),n("span",{class:"mord mathnormal"},"co"),n("span",{class:"mord mathnormal"},"nn"),n("span",{class:"mord mathnormal"},"ec"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"d")])])]),n("span",{class:"vlist-s"},"\u200B")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8804em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])])],-1),b=s(`<pre class="language-r"><code class="language-r">local_clustering_coefficient <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>node<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  transitivity<span class="token punctuation">(</span> igraph<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span> 
<span class="token punctuation">}</span>
</code></pre><h4><strong>Normalized closeness centrality</strong></h4><pre class="language-r"><code class="language-r">igraph_Closeness_centrality_node <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mattestbis<span class="token punctuation">,</span>node<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  closeness<span class="token punctuation">(</span>ig<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token operator">*</span>nrow<span class="token punctuation">(</span>mattestbis<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><h4><strong>Betweenness centrality</strong></h4><pre class="language-r"><code class="language-r">igraph_betweenness_centrality_node <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input_mat<span class="token punctuation">,</span>node<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  igraph <span class="token operator">&lt;-</span> undirectedIgraphFromAdjancyMatrix<span class="token punctuation">(</span>input_mat<span class="token punctuation">)</span>
  betweenness<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><h3>3) Plotting ability</h3><p>It\u2019s possible the change the color of the node accordingly to their characteristic.</p><h4><strong>Color</strong></h4><p>To determine the color of a node we use a linear repartition of attribute with rgb color.</p><p>You can use a color of reference like the one used in the example: Esisar\u2019s purple color.</p><pre class="language-r"><code class="language-r">inputcolor.R <span class="token operator">&lt;-</span> <span class="token number">146</span>
inputcolor.G <span class="token operator">&lt;-</span> <span class="token number">39</span>
inputcolor.B <span class="token operator">&lt;-</span> <span class="token number">143</span>

findcolor <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input_val<span class="token punctuation">,</span>low_val<span class="token punctuation">,</span> high_val<span class="token punctuation">,</span>inputcolor <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  range <span class="token operator">&lt;-</span> high_val <span class="token operator">-</span> low_val<span class="token punctuation">;</span>
  step.R <span class="token operator">&lt;-</span> floor<span class="token punctuation">(</span>inputcolor.R <span class="token operator">*</span> <span class="token punctuation">(</span>input_val<span class="token operator">-</span>low_val<span class="token punctuation">)</span> <span class="token operator">/</span> range<span class="token punctuation">)</span> 
  step.G <span class="token operator">&lt;-</span> floor<span class="token punctuation">(</span>inputcolor.G <span class="token operator">*</span> <span class="token punctuation">(</span>input_val<span class="token operator">-</span>low_val<span class="token punctuation">)</span> <span class="token operator">/</span> range<span class="token punctuation">)</span>
  step.B <span class="token operator">&lt;-</span> floor<span class="token punctuation">(</span>inputcolor.B <span class="token operator">*</span> <span class="token punctuation">(</span>input_val<span class="token operator">-</span>low_val<span class="token punctuation">)</span> <span class="token operator">/</span> range<span class="token punctuation">)</span>
  step <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>step.R<span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">,</span>step.G<span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">,</span>step.B<span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><p>The we just have to modify the vertex attribute.</p><pre class="language-r"><code class="language-r">colorgraph <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>inputcolor<span class="token punctuation">,</span>inputtype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>inputtype <span class="token operator">==</span> <span class="token string">&quot;degree&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    degreevect <span class="token operator">&lt;-</span> igraphdegrees<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span>length<span class="token punctuation">(</span>degreevect<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      vcolor <span class="token operator">&lt;-</span> findcolor<span class="token punctuation">(</span> degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> inputcolor <span class="token punctuation">)</span>
      igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rgb<span class="token punctuation">(</span>vcolor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;closeness&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    closnessvect <span class="token operator">&lt;-</span> closeness<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      vcolor <span class="token operator">&lt;-</span> findcolor<span class="token punctuation">(</span> closnessvect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span> <span class="token punctuation">,</span> inputcolor <span class="token punctuation">)</span>
      igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rgb<span class="token punctuation">(</span>vcolor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;clustering&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    local_cluster <span class="token operator">&lt;-</span> transitivity<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>local_cluster<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> is.nan<span class="token punctuation">(</span>local_cluster<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">FALSE</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token comment"># /!\\ Points were local clustering can&#39;t be etablish are not colored here</span>
        vcolor <span class="token operator">&lt;-</span> findcolor<span class="token punctuation">(</span> local_cluster<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>local_cluster<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>local_cluster<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> inputcolor <span class="token punctuation">)</span>
        igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rgb<span class="token punctuation">(</span>vcolor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;betweenness&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    betw <span class="token operator">&lt;-</span> betweenness<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>betw<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> is.nan<span class="token punctuation">(</span>betw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">FALSE</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        vcolor <span class="token operator">&lt;-</span> findcolor<span class="token punctuation">(</span> betw<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>betw<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>betw<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> inputcolor <span class="token punctuation">)</span>
        igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rgb<span class="token punctuation">(</span>vcolor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>vcolor<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  igraph
<span class="token punctuation">}</span>
</code></pre><h4><strong>Size</strong></h4><p>The process to modify the node size is almost the same as for color. We have replace the input color by a size coefficient to change the scale of plotting.</p><pre class="language-r"><code class="language-r">findsize <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input_val<span class="token punctuation">,</span>low_val<span class="token punctuation">,</span> high_val<span class="token punctuation">,</span> sizeCoef <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  range <span class="token operator">&lt;-</span> high_val <span class="token operator">-</span> low_val<span class="token punctuation">;</span>
  step  <span class="token operator">&lt;-</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>input_val<span class="token operator">-</span>low_val<span class="token punctuation">)</span> <span class="token operator">/</span> range<span class="token punctuation">)</span><span class="token operator">*</span>sizeCoef
<span class="token punctuation">}</span>
</code></pre><pre class="language-r"><code class="language-r">sizegraph <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>inputtype<span class="token punctuation">,</span>sizeCoef<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>inputtype <span class="token operator">==</span> <span class="token string">&quot;degree&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    degreevect <span class="token operator">&lt;-</span> igraphdegrees<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span>length<span class="token punctuation">(</span>degreevect<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      wsize <span class="token operator">&lt;-</span> findsize<span class="token punctuation">(</span> degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>degree<span class="token punctuation">(</span>igraph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> sizeCoef <span class="token punctuation">)</span>
      igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> wsize<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;closeness&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    closnessvect <span class="token operator">&lt;-</span> closeness<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      wsize <span class="token operator">&lt;-</span> findsize<span class="token punctuation">(</span> closnessvect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>closnessvect<span class="token punctuation">)</span> <span class="token punctuation">,</span> sizeCoef <span class="token punctuation">)</span>
      igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> wsize<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;clustering&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    local_cluster <span class="token operator">&lt;-</span> transitivity<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>local_cluster<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> is.nan<span class="token punctuation">(</span>local_cluster<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">FALSE</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>

        wsize <span class="token operator">&lt;-</span> findsize<span class="token punctuation">(</span> local_cluster<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>local_cluster<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>local_cluster<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> sizeCoef <span class="token punctuation">)</span>
        igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> wsize<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span>
      <span class="token punctuation">{</span>
        <span class="token comment"># /!\\ Points were local clustering can&#39;t be etablish we set default size to 1</span>
        igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> inputtype <span class="token operator">==</span> <span class="token string">&quot;betweenness&quot;</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    betw <span class="token operator">&lt;-</span> betweenness<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>normalized <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> length<span class="token punctuation">(</span>betw<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> is.nan<span class="token punctuation">(</span>betw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">FALSE</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        wsize <span class="token operator">&lt;-</span> findsize<span class="token punctuation">(</span> betw<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> min<span class="token punctuation">(</span>betw<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>betw<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> sizeCoef <span class="token punctuation">)</span>
        igraph <span class="token operator">&lt;-</span> set.vertex.attribute<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> wsize<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  igraph
<span class="token punctuation">}</span>
</code></pre><p>Those functions can be performed more efficiently.</p>`,18),f=[h,d,g,y,b],w={setup(l,{expose:a}){return a({frontmatter:{meta:[]}}),i({meta:[]}),(_,x)=>(p(),o("div",m,f))}},v={class:"allContent text-center"},S=r({setup(l){return(a,c)=>{const t=u;return p(),o("div",v,[e(k(w),{class:"md"}),e(t,{nextSectionName:"Random graph models",nextRoute:"/complexSystem/random-graph-models",previousSectionName:"Breadth-first search algorithm and applications",previousRoute:"/complexSystem/getting-started/breadth-first-search-algorithm-and-applications"})])}}});export{S as default};
