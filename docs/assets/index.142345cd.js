import{_ as r}from"./ButtonSection.b76f77df.js";import{A as i,o as p,b as e,e as n,g as a,f as u,d as m,i as o,u as k}from"./vendor.2aa3e7d8.js";import"./app.0ff1674a.js";const h={class:"prose prose-sm m-auto text-left"},d=n("h1",null,"Erdos-Renyi model",-1),g=n("p",null,[a("The Graph Erdos-Renyi "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"G"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{separator:"true"},","),n("mi",null,"p"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mo",{stretchy:"false"},"("),n("mi",null,"V"),n("mo",{separator:"true"},","),n("mi",null,"E"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"G(n, p) = (V,E)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"G"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),n("span",{class:"mclose"},")")])])])]),a(" constructed from a set "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"V")]),n("annotation",{encoding:"application/x-tex"},"V")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V")])])])]),a(" of "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])])]),a(" vertices. The edge between 2 vertices "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])])]),a(" and "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"j")]),n("annotation",{encoding:"application/x-tex"},"j")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])])]),a(" exists with probability "),n("eq",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"p")]),n("annotation",{encoding:"application/x-tex"},"p")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"p")])])])]),a(".")],-1),w=u(`<p>Below is a proposition of algorithm :</p><pre class="language-r"><code class="language-r">Erdos_Renyi <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span> 
  igraph  <span class="token operator">&lt;-</span> make_empty_graph<span class="token punctuation">(</span>directed <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>
  igraph <span class="token operator">&lt;-</span> add_vertices<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span>n<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">:</span> n<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token keyword">in</span> i <span class="token operator">:</span> n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span> runif<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> p <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        igraph <span class="token operator">&lt;-</span> add_edges<span class="token punctuation">(</span>igraph<span class="token punctuation">,</span> c<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  igraph
<span class="token punctuation">}</span>
</code></pre><p>This implementation gives the right output. However due to the 2 for loop performance is quite bad and it can take several minutes with large graph.</p><p>A faster implementation is proposed below with an approach much /!\\ closer to adjacency matrix.</p><p>Note the transpose trick used to make the matrix symmetric.</p><pre class="language-r"><code class="language-r">Erdos_Renyi_optimized <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  nb_tri <span class="token operator">&lt;-</span> n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
  mat <span class="token operator">&lt;-</span> diag<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>nrow <span class="token operator">=</span> n<span class="token punctuation">,</span> ncol <span class="token operator">=</span> n<span class="token punctuation">)</span>
  vect_rand <span class="token operator">&lt;-</span> runif<span class="token punctuation">(</span>nb_tri <span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> p
  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span>nb_tri<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>vect_rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      vect_rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;-</span> <span class="token number">0</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      vect_rand<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;-</span> <span class="token number">1</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  mat<span class="token punctuation">[</span>lower.tri<span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> vect_rand
  mat <span class="token operator">&lt;-</span> t<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>
  mat<span class="token punctuation">[</span>lower.tri<span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> vect_rand
  igraph <span class="token operator">&lt;-</span> graph_from_adjacency_matrix<span class="token punctuation">(</span>mat<span class="token punctuation">,</span>mode <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">&quot;undirected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  igraph
<span class="token punctuation">}</span>
</code></pre>`,6),x=[d,g,w],_={setup(l,{expose:s}){return s({frontmatter:{meta:[]}}),i({meta:[]}),(f,b)=>(p(),e("div",h,x))}},y={class:"allContent text-center"},j=m({setup(l){return(s,c)=>{const t=r;return p(),e("div",y,[o(k(_),{class:"md"}),o(t,{nextSectionName:"Watts-Strogatz model : Small world network",nextRoute:"/complexSystem/random-graph-models/watts-strogatz-model-small-world-network",previousSectionName:"Random graph models",previousRoute:"/complexSystem/random-graph-models"})])}}});export{j as default};
